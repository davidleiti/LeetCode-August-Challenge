/**
 Group anagrams supposing that each string can contain any number of a given character.
 The solution is based on grouping the input strings in a map where the key will be a String 
 otained from the generateKey(String) method, and the value will contain the list of strings from that group.
 The key is generated by counting the occurrences of each character in a ByteArray and converting it to a String.
 */
class SolutionAnyChars {
    fun groupAnagrams(strs: Array<String>): List<List<String>> = 
        strs.groupBy { String(generateKey(it)) }.map { it.value }

    fun generateKey(str: String): ByteArray = str.fold(ByteArray(26) { 0 }) { acc, char -> 
        acc.apply { 
            val charPos = char - 'a'
            this[charPos] = (this[charPos] + 1).toByte()
        }
    }
}

/**
Group anagrams supposing that each string contains only distinct characters.
This way, keys for anagram groups can be generated much more efficiently with the following steps:
1. Initialize the Integer key with 0, where the last 26 bits from 32 will represent the presence of each possible 
letter based on its position in the alphabet: 0 for A, 1 for B, ..., 25 - Z
2. Iterate over the characters of the string and perform a bitwise OR between the current key and a mask
having a bit set to 1 at the position that specific letter. The mask is obtained by simple shift left operations.
3. Update the key with the output from the bitwise OR and return it after all the entire string has been consumed.
*/
class SolutionDistinctChars {
    fun groupAnagrams(strs: Array<String>): List<List<String>> {
        val groups: MutableMap<Int, List<String>> = mutableMapOf()
        for (str in strs) { 
            val key = generateKey(str)
            groups[key] = groups[key]?.plus(str) ?: listOf(str)
        }

        return groups.values.toList()
    }
    
    // Generate a numeric key for a given string based on its characters
    fun generateKey(str: String): Int {
        return str.fold(0) { key, char -> 
            val charPos = char - 'a'
            var mask = 1 shl charPos
            key or mask
        }
    }
}